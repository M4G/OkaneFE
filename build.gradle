import org.gradle.api.Project;

allprojects {
    apply plugin: 'java'
    apply plugin: 'idea'
    apply from: "${rootProject.projectDir}/dependencies.gradle"
    configurations.all {
        resolutionStrategy {
            //cacheChangingModulesFor 10, 'minutes'
            cacheChangingModulesFor 0, 'seconds'
            cacheDynamicVersionsFor 0, 'seconds'
            //failOnVersionConflict()
        }
    }
}


sourceCompatibility = 1.7

version = '1.0'

subprojects {
    repositories {
        mavenLocal()
        mavenCentral()
        maven {
            url 'http://maven.vaadin.com/vaadin-addons'
        }
    }
}

idea {
    module {
        module {
            iml {
                withXml {
                    Project gradleProject = this.project;
                    Node module = it.asNode();
                    def facetManager = module.component.find { it.@name == 'FacetManager' } as Node
                    if (facetManager) {
                        Node webFacet = facetManager.facet.find { it.@type == 'web' }
                        if (webFacet) {
                            facetManager.remove(webFacet)
                        }
                    } else {
                        facetManager = module.appendNode('component', [name: 'FacetManager']);
                    }
                    def builder = new NodeBuilder();
                    def webFacet = builder.facet(type: "web", name: 'Web') {
                        configuration {
                            descriptors {
                                deploymentDescriptor(name: 'web.xml', url: 'file://$MODULE_DIR$/webapp/src/main/WEB-INF/web.xml')
                            }
                            webroots {
                                root(url: 'file://$MODULE_DIR$/webapp/src/main', relative: '/')
                            }
/*                        sourceRoots {
                            root(url: 'file://$MODULE_DIR$/src/main/java')
                            root(url: 'file://$MODULE_DIR$/src/main/resources')
                        }*/
                        }
                    }
                    facetManager.append webFacet
                }
            }
        }

        excludeDirs += file('.gradle')
        excludeDirs += file('.idea')
        excludeDirs += file('build')
        excludeDirs += file('out')
    }
    project {
        vcs = 'Git'
        ipr {
            withXml {
                Project gradleProject = this.project;
                Node project =  it.asNode();
                def artifactManager = project.component.find { it.@name == 'ArtifactManager' } as Node
                if (artifactManager) {
                    Node artifact = artifactManager.artifact.find { it.@type == 'exploded-war' }
                    if (artifact) {
                        artifactManager.remove(artifact)
                    }
                } else {
                    artifactManager = project.appendNode('component', [name: 'ArtifactManager']);
                }
                def builder = new NodeBuilder();
                def artifact = builder.artifact(type: 'exploded-war', name: "${gradleProject.name}:Web exploded") {
                    'output-path'("\$PROJECT_DIR\$/out/artifacts/${gradleProject.name}_Web_exploded")
                    root(id: 'root') {
                        element(id: 'javaee-facet-resources', facet: "${gradleProject.name}/web/Web");
                        element(id: 'directory', name: 'WEB-INF') {
                            element(id: 'directory', name: 'classes') {
                                element(id: 'module-output', name: "${gradleProject.name}")
                                gradleProject.subprojects.each{
                                    element(id: 'module-output', name: it.name)
                                }
                            }
                            element(id: 'directory', name: 'lib') {
                                gradleProject.configurations.runtime.each {
                                    element(id: 'file-copy', path: it)
                                }
                                gradleProject.subprojects.each{
                                    def itt = it;
                                    itt.configurations.runtime.each {
                                        element(id: 'file-copy', path: it)
                                    }
                                }
                            }
                        }
                    }
                }
                artifactManager.append artifact
            }
        }
    }
}

task wrapper(type: Wrapper) {
    gradleVersion = '2.4'
}